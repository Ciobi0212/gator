// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follows AS (
    INSERT INTO feed_follows(created_at, updated_at, user_id, feed_id)
    VALUES ($1, $2, $3, $4)
    RETURNING id, created_at, updated_at, user_id, feed_id
)

SELECT inserted_feed_follows.id, inserted_feed_follows.created_at, inserted_feed_follows.updated_at, inserted_feed_follows.user_id, inserted_feed_follows.feed_id, users.name, feed.name 
FROM inserted_feed_follows 
JOIN users on users.id = inserted_feed_follows.user_id
JOIN feed on feed.id = inserted_feed_follows.feed_id
`

type CreateFeedFollowParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    int32
}

type CreateFeedFollowRow struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    int32
	Name      string
	Name_2    string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.Name,
		&i.Name_2,
	)
	return i, err
}

const deleteAllFeedFollows = `-- name: DeleteAllFeedFollows :exec
DELETE FROM feed_follows
`

func (q *Queries) DeleteAllFeedFollows(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllFeedFollows)
	return err
}

const deleteFeedFollowsEntry = `-- name: DeleteFeedFollowsEntry :exec
DELETE FROM feed_follows
WHERE user_id = $1 and feed_id = $2
`

type DeleteFeedFollowsEntryParams struct {
	UserID uuid.UUID
	FeedID int32
}

func (q *Queries) DeleteFeedFollowsEntry(ctx context.Context, arg DeleteFeedFollowsEntryParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollowsEntry, arg.UserID, arg.FeedID)
	return err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many

WITH feed_follows_entries AS (
    SELECT id, created_at, updated_at, user_id, feed_id from feed_follows
    WHERE user_id = $1
)

SELECT feed.name, feed.url FROM feed_follows_entries
JOIN feed ON feed.id = feed_follows_entries.feed_id
`

type GetFeedFollowsForUserRow struct {
	Name string
	Url  string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.Name, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
